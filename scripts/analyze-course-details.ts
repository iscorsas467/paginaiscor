import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Lista de cursos con informaci√≥n espec√≠fica en la API
const coursesWithSpecificInfo = [
  'Trabajo en Alturas',
  'Espacios Confinados', 
  'Control y Extinci√≥n de Incendios',
  'Primeros Auxilios B√°sicos y Avanzados',
  'Materiales y Mercanc√≠as Peligrosas',
  'Operaci√≥n Segura de Montacargas'
];

async function analyzeCourseDetails() {
  try {
    console.log('üîç Analizando informaci√≥n detallada de los 29 cursos...\n');

    // Obtener todos los cursos de la base de datos
    const allCourses = await prisma.home_service_items.findMany({
      orderBy: { order: 'asc' }
    });

    console.log(`üìä Total de cursos en la base de datos: ${allCourses.length}\n`);

    // Analizar cada curso
    let coursesWithSpecificDetails = 0;
    let coursesWithGenericDetails = 0;

    console.log('üìã AN√ÅLISIS DETALLADO:\n');

    for (const course of allCourses) {
      const hasSpecificInfo = coursesWithSpecificInfo.includes(course.name);
      
      if (hasSpecificInfo) {
        coursesWithSpecificDetails++;
        console.log(`‚úÖ ${course.name} - INFORMACI√ìN ESPEC√çFICA`);
        console.log(`   üìù Descripci√≥n detallada personalizada`);
        console.log(`   üéØ Objetivos espec√≠ficos del curso`);
        console.log(`   üí° Beneficios espec√≠ficos`);
        console.log(`   üìã M√≥dulos espec√≠ficos`);
        console.log(`   üë®‚Äçüè´ Instructor espec√≠fico`);
        console.log(`   ‚è±Ô∏è Duraci√≥n espec√≠fica`);
        console.log(`   üìú Certificaci√≥n espec√≠fica`);
        console.log(`   üìç Ubicaci√≥n espec√≠fica`);
        console.log(`   üïí Horario espec√≠fico`);
        console.log('');
      } else {
        coursesWithGenericDetails++;
        console.log(`‚ö†Ô∏è  ${course.name} - INFORMACI√ìN GEN√âRICA`);
        console.log(`   üìù Descripci√≥n gen√©rica`);
        console.log(`   üéØ Objetivos gen√©ricos`);
        console.log(`   üí° Beneficios gen√©ricos`);
        console.log(`   üìã M√≥dulos gen√©ricos`);
        console.log(`   üë®‚Äçüè´ Instructor gen√©rico`);
        console.log(`   ‚è±Ô∏è Duraci√≥n gen√©rica (40 horas)`);
        console.log(`   üìú Certificaci√≥n gen√©rica (2 a√±os)`);
        console.log(`   üìç Ubicaci√≥n gen√©rica`);
        console.log(`   üïí Horario gen√©rico`);
        console.log('');
      }
    }

    // Resumen final
    console.log('üìä RESUMEN DEL AN√ÅLISIS:\n');
    console.log(`‚úÖ Cursos con informaci√≥n espec√≠fica: ${coursesWithSpecificDetails}/29 (${Math.round(coursesWithSpecificDetails/29*100)}%)`);
    console.log(`‚ö†Ô∏è  Cursos con informaci√≥n gen√©rica: ${coursesWithGenericDetails}/29 (${Math.round(coursesWithGenericDetails/29*100)}%)`);
    console.log('');

    // Lista de cursos que necesitan informaci√≥n espec√≠fica
    const coursesNeedingSpecificInfo = allCourses
      .filter((course: any) => !coursesWithSpecificInfo.includes(course.name))
      .map((course: any) => course.name);

    console.log('üìù CURSOS QUE NECESITAN INFORMACI√ìN ESPEC√çFICA:\n');
    coursesNeedingSpecificInfo.forEach((courseName, index) => {
      console.log(`${index + 1}. ${courseName}`);
    });

    console.log('\nüéØ RECOMENDACIONES:');
    console.log('1. Completar informaci√≥n espec√≠fica para los 23 cursos restantes');
    console.log('2. Agregar objetivos, beneficios y m√≥dulos espec√≠ficos');
    console.log('3. Asignar instructores especializados por curso');
    console.log('4. Personalizar duraci√≥n y certificaci√≥n seg√∫n el curso');
    console.log('5. Agregar ubicaciones y horarios espec√≠ficos');

    console.log('\n‚úÖ FUNCIONALIDAD ACTUAL:');
    console.log('- Todos los 29 cursos tienen p√°gina individual funcional');
    console.log('- Todos tienen formulario de contacto');
    console.log('- Todos tienen informaci√≥n b√°sica (descripci√≥n, icono, gradiente)');
    console.log('- 6 cursos tienen informaci√≥n detallada espec√≠fica');
    console.log('- 23 cursos tienen informaci√≥n detallada gen√©rica pero completa');

  } catch (error) {
    console.error('‚ùå Error en el an√°lisis:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeCourseDetails();
